# 2023/01/10

Q. 아직 입양을 못 간 동물 중, 가장 오래 보호소에 있었던 동물 3마리의 이름과 보호 시작일을 조회하는 SQL문을 작성해주세요. 
이때 결과는 보호 시작일 순으로 조회해야 합니다.

SELECT ANIMAL_INS.NAME, ANIMAL_INS.DATETIME
FROM ANIMAL_OUTS 
RIGHT JOIN ANIMAL_INS ON ANIMAL_INS.ANIMAL_ID = ANIMAL_OUTS.ANIMAL_ID
WHERE SEX_UPON_OUTCOME IS NULL
ORDER BY ANIMAL_INS.DATETIME
LIMIT 3;

Q. 보호소에서 중성화 수술을 거친 동물 정보를 알아보려 합니다. 
보호소에 들어올 당시에는 중성화1되지 않았지만, 보호소를 나갈 당시에는 중성화된 동물의 아이디와 생물 종, 이름을 조회하는 아이디 순으로 조회하는 SQL 문을 작성해주세요.

SELECT ANIMAL_INS.ANIMAL_ID, ANIMAL_INS.ANIMAL_TYPE, ANIMAL_INS.NAME
FROM ANIMAL_INS
JOIN ANIMAL_OUTS ON ANIMAL_INS.ANIMAL_ID = ANIMAL_OUTS.ANIMAL_ID
WHERE (ANIMAL_INS.SEX_UPON_INTAKE LIKE "Intact %") 
AND (
    (ANIMAL_OUTS.SEX_UPON_OUTCOME LIKE 'Spayed %')
or
    (ANIMAL_OUTS.SEX_UPON_OUTCOME LIKE 'Neutered %')
)


# 2023/01/11

관리자의 실수로 일부 동물의 입양일이 잘못 입력되었습니다. 보호 시작일보다 입양일이 더 빠른 동물의 아이디와 이름을 조회하는 SQL문을 작성해주세요.
이때 결과는 보호 시작일이 빠른 순으로 조회해야합니다.

SELECT ANIMAL_INS.ANIMAL_ID, ANIMAL_INS.NAME
FROM ANIMAL_INS
JOIN ANIMAL_OUTS ON ANIMAL_INS.ANIMAL_ID = ANIMAL_OUTS.ANIMAL_ID
WHERE ANIMAL_INS.DATETIME > ANIMAL_OUTS.DATETIME
ORDER BY ANIMAL_INS.DATETIME;


# 2023/01/13


Q. PRODUCT 테이블과 OFFLINE_SALE 테이블에서 상품코드 별 매출액(판매가 * 판매량) 합계를 출력하는 SQL문을 작성해주세요.
결과는 매출액을 기준으로 내림차순 정렬해주시고 매출액이 같다면 상품코드를 기준으로 오름차순 정렬해주세요.

SELECT product_code, SUM(sales_amount * price) AS SALES
FROM OFFLINE_SALE
JOIN PRODUCT ON OFFLINE_SALE.PRODUCT_ID = PRODUCT.PRODUCT_ID
GROUP BY product_code
ORDER BY SALES DESC, product_code;


# 2023/01/14

Q. 천재지변으로 인해 일부 데이터가 유실되었습니다. 
입양을 간 기록은 있는데, 보호소에 들어온 기록이 없는 동물의 ID와 이름을 ID 순으로 조회하는 SQL문을 작성해주세요.

SELECT ANIMAL_OUTS.ANIMAL_ID, ANIMAL_OUTS.NAME
FROM ANIMAL_OUTS
LEFT JOIN ANIMAL_INS ON ANIMAL_INS.ANIMAL_ID = ANIMAL_OUTS.ANIMAL_ID
WHERE ANIMAL_INS.ANIMAL_ID IS NULL
ORDER BY ANIMAL_ID;

# 2023/01/16

Q. FOOD_PRODUCT와 FOOD_ORDER 테이블에서 생산일자가 2022년 5월인 식품들의 식품 ID, 식품 이름, 총매출을 조회하는 SQL문을 작성해주세요. 
이때 결과는 총매출을 기준으로 내림차순 정렬해주시고 총매출이 같다면 식품 ID를 기준으로 오름차순 정렬해주세요.

SELECT FOOD_PRODUCT.PRODUCT_ID, FOOD_PRODUCT.PRODUCT_NAME, SUM(FOOD_PRODUCT.PRICE * FOOD_ORDER.AMOUNT) AS TOTAL_SALES
FROM FOOD_PRODUCT
JOIN FOOD_ORDER ON FOOD_PRODUCT.PRODUCT_ID = FOOD_ORDER.PRODUCT_ID
WHERE PRODUCE_DATE LIKE "2022-05-%"
GROUP BY PRODUCT_NAME
ORDER BY TOTAL_SALES DESC, PRODUCT_ID;


# 2023/01/17

Q. '경제' 카테고리에 속하는 도서들의 도서 ID(BOOK_ID), 저자명(AUTHOR_NAME), 출판일(PUBLISHED_DATE) 리스트를 출력하는 SQL문을 작성해주세요.
결과는 출판일을 기준으로 오름차순 정렬해주세요.

SELECT BOOK.BOOK_ID, AUTHOR.AUTHOR_NAME, DATE_FORMAT(BOOK.PUBLISHED_DATE, "%Y-%m-%d") AS PUBLISHED_DATE
FROM BOOK
JOIN AUTHOR ON BOOK.AUTHOR_ID = AUTHOR.AUTHOR_ID
WHERE category = '경제'
ORDER BY PUBLISHED_DATE;


# 2023/01/21

Q. 7월 아이스크림 총 주문량과 상반기의 아이스크림 총 주문량을 더한 값이 큰 순서대로 상위 3개의 맛을 조회하는 SQL 문을 작성해주세요.

SELECT tmp_HALF.FLAVOR
FROM
    (SELECT FLAVOR, SUM(TOTAL_ORDER) AS HALF
    FROM FIRST_HALF
    GROUP BY FLAVOR) AS tmp_HALF
JOIN 
    (SELECT FLAVOR, SUM(TOTAL_ORDER) AS JULY
    FROM JULY
    GROUP BY FLAVOR) AS tmp_JULY
ON tmp_HALF.FLAVOR = tmp_JULY.FLAVOR
ORDER BY (HALF + JULY) DESC
LIMIT 3;


# 2023/01/25

Q. MEMBER_PROFILE와 REST_REVIEW 테이블에서 리뷰를 가장 많이 작성한 회원의 리뷰들을 조회하는 SQL문을 작성해주세요. 
회원 이름, 리뷰 텍스트, 리뷰 작성일이 출력되도록 작성해주시고, 결과는 리뷰 작성일을 기준으로 오름차순, 리뷰 작성일이 같다면 리뷰 텍스트를 기준으로 오름차순 정렬해주세요.

SELECT MEMBER_PROFILE.MEMBER_NAME, REST_REVIEW.REVIEW_TEXT, DATE_FORMAT(REST_REVIEW.REVIEW_DATE, "%Y-%m-%d")
FROM MEMBER_PROFILE
JOIN REST_REVIEW ON REST_REVIEW.MEMBER_ID = MEMBER_PROFILE.MEMBER_ID
WHERE MEMBER_NAME IN 
    (SELECT MEMBER_PROFILE.MEMBER_NAME
    FROM MEMBER_PROFILE
    JOIN REST_REVIEW ON REST_REVIEW.MEMBER_ID = MEMBER_PROFILE.MEMBER_ID
    GROUP BY REST_REVIEW.MEMBER_ID
    HAVING COUNT(REST_REVIEW.REVIEW_ID) = 
        (SELECT COUNT(REST_REVIEW.REVIEW_ID) AS CNT
        FROM MEMBER_PROFILE
        JOIN REST_REVIEW ON REST_REVIEW.MEMBER_ID = MEMBER_PROFILE.MEMBER_ID
        GROUP BY REST_REVIEW.MEMBER_ID
        ORDER BY CNT DESC
        LIMIT 1))
ORDER BY REVIEW_DATE, REVIEW_TEXT;


Q. USER_INFO 테이블과 ONLINE_SALE 테이블에서 2021년에 가입한 전체 회원들 중 상품을 구매한 회원수와 상품을 구매한 회원의 비율(=2021년에 가입한 회원 중 상품을 구매한 회원수 / 2021년에 가입한 전체 회원 수)을 년, 월 별로 출력하는 SQL문을 작성해주세요.
상품을 구매한 회원의 비율은 소수점 두번째자리에서 반올림하고, 전체 결과는 년을 기준으로 오름차순 정렬해주시고 년이 같다면 월을 기준으로 오름차순 정렬해주세요.

SELECT YEAR(sales_date) AS YEAR, MONTH(sales_date) AS MONTH, COUNT(DISTINCT user_id) AS PUCHASED_USERS,
       ROUND(COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT USER_ID)
            FROM USER_INFO
            WHERE YEAR(JOINED) = 2021), 1) AS PUCHASED_RATIO
FROM ONLINE_SALE
# 2021년에 가입한 전체 회원들 필터링
WHERE USER_ID IN (SELECT DISTINCT ONLINE_SALE.USER_ID  
                  FROM USER_INFO
                  JOIN ONLINE_SALE ON ONLINE_SALE.USER_ID = USER_INFO.USER_ID
                  WHERE YEAR(JOINED) = 2021)
GROUP BY YEAR, MONTH
ORDER BY YEAR, MONTH;